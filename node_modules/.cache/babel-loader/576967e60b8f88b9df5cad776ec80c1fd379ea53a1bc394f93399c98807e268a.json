{"ast":null,"code":"import { getRangeValue, getValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue } from \"tsparticles-engine\";\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n  const destroyOptions = parent.options.destroy;\n  if (!destroyOptions) {\n    return;\n  }\n  const splitOptions = destroyOptions.split,\n    options = loadParticlesOptions(engine, container, parent.options),\n    factor = getValue(splitOptions.factor),\n    parentColor = parent.getFillColor();\n  if (splitOptions.color) {\n    options.color.load(splitOptions.color);\n  } else if (splitOptions.colorOffset && parentColor) {\n    var _splitOptions$colorOf, _splitOptions$colorOf2, _splitOptions$colorOf3;\n    options.color.load({\n      value: {\n        hsl: {\n          h: parentColor.h + getRangeValue((_splitOptions$colorOf = splitOptions.colorOffset.h) !== null && _splitOptions$colorOf !== void 0 ? _splitOptions$colorOf : 0),\n          s: parentColor.s + getRangeValue((_splitOptions$colorOf2 = splitOptions.colorOffset.s) !== null && _splitOptions$colorOf2 !== void 0 ? _splitOptions$colorOf2 : 0),\n          l: parentColor.l + getRangeValue((_splitOptions$colorOf3 = splitOptions.colorOffset.l) !== null && _splitOptions$colorOf3 !== void 0 ? _splitOptions$colorOf3 : 0)\n        }\n      }\n    });\n  } else {\n    options.color.load({\n      value: {\n        hsl: parent.getFillColor()\n      }\n    });\n  }\n  options.move.load({\n    center: {\n      x: parent.position.x,\n      y: parent.position.y,\n      mode: \"precise\"\n    }\n  });\n  if (isNumber(options.size.value)) {\n    options.size.value /= factor;\n  } else {\n    options.size.value.min /= factor;\n    options.size.value.max /= factor;\n  }\n  options.load(splitParticlesOptions);\n  const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0,\n    position = {\n      x: parent.position.x + randomInRange(offset),\n      y: parent.position.y + randomInRange(offset)\n    };\n  return container.particles.addParticle(position, options, parent.group, particle => {\n    var _parent$splitCount;\n    if (particle.size.value < 0.5) {\n      return false;\n    }\n    particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n    particle.splitCount = ((_parent$splitCount = parent.splitCount) !== null && _parent$splitCount !== void 0 ? _parent$splitCount : 0) + 1;\n    particle.unbreakable = true;\n    setTimeout(() => {\n      particle.unbreakable = false;\n    }, 500);\n    return true;\n  });\n}\nexport function split(engine, container, particle) {\n  const destroyOptions = particle.options.destroy;\n  if (!destroyOptions) {\n    return;\n  }\n  const splitOptions = destroyOptions.split;\n  if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n    return;\n  }\n  const rate = getValue(splitOptions.rate),\n    particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n  for (let i = 0; i < rate; i++) {\n    addSplitParticle(engine, container, particle, particlesSplitOptions);\n  }\n}","map":{"version":3,"names":["getRangeValue","getValue","isNumber","itemFromSingleOrMultiple","loadParticlesOptions","randomInRange","setRangeValue","addSplitParticle","engine","container","parent","splitParticlesOptions","destroyOptions","options","destroy","splitOptions","split","factor","parentColor","getFillColor","color","load","colorOffset","_splitOptions$colorOf","_splitOptions$colorOf2","_splitOptions$colorOf3","value","hsl","h","s","l","move","center","x","position","y","mode","size","min","max","offset","sizeOffset","particles","addParticle","group","particle","_parent$splitCount","velocity","length","splitCount","unbreakable","setTimeout","count","undefined","rate","particlesSplitOptions","i"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-updater-destroy/esm/Utils.js"],"sourcesContent":["import { getRangeValue, getValue, isNumber, itemFromSingleOrMultiple, loadParticlesOptions, randomInRange, setRangeValue, } from \"tsparticles-engine\";\nfunction addSplitParticle(engine, container, parent, splitParticlesOptions) {\n    const destroyOptions = parent.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split, options = loadParticlesOptions(engine, container, parent.options), factor = getValue(splitOptions.factor), parentColor = parent.getFillColor();\n    if (splitOptions.color) {\n        options.color.load(splitOptions.color);\n    }\n    else if (splitOptions.colorOffset && parentColor) {\n        options.color.load({\n            value: {\n                hsl: {\n                    h: parentColor.h + getRangeValue(splitOptions.colorOffset.h ?? 0),\n                    s: parentColor.s + getRangeValue(splitOptions.colorOffset.s ?? 0),\n                    l: parentColor.l + getRangeValue(splitOptions.colorOffset.l ?? 0),\n                },\n            },\n        });\n    }\n    else {\n        options.color.load({\n            value: {\n                hsl: parent.getFillColor(),\n            },\n        });\n    }\n    options.move.load({\n        center: {\n            x: parent.position.x,\n            y: parent.position.y,\n            mode: \"precise\",\n        },\n    });\n    if (isNumber(options.size.value)) {\n        options.size.value /= factor;\n    }\n    else {\n        options.size.value.min /= factor;\n        options.size.value.max /= factor;\n    }\n    options.load(splitParticlesOptions);\n    const offset = splitOptions.sizeOffset ? setRangeValue(-parent.size.value, parent.size.value) : 0, position = {\n        x: parent.position.x + randomInRange(offset),\n        y: parent.position.y + randomInRange(offset),\n    };\n    return container.particles.addParticle(position, options, parent.group, (particle) => {\n        if (particle.size.value < 0.5) {\n            return false;\n        }\n        particle.velocity.length = randomInRange(setRangeValue(parent.velocity.length, particle.velocity.length));\n        particle.splitCount = (parent.splitCount ?? 0) + 1;\n        particle.unbreakable = true;\n        setTimeout(() => {\n            particle.unbreakable = false;\n        }, 500);\n        return true;\n    });\n}\nexport function split(engine, container, particle) {\n    const destroyOptions = particle.options.destroy;\n    if (!destroyOptions) {\n        return;\n    }\n    const splitOptions = destroyOptions.split;\n    if (splitOptions.count >= 0 && (particle.splitCount === undefined || particle.splitCount++ > splitOptions.count)) {\n        return;\n    }\n    const rate = getValue(splitOptions.rate), particlesSplitOptions = itemFromSingleOrMultiple(splitOptions.particles);\n    for (let i = 0; i < rate; i++) {\n        addSplitParticle(engine, container, particle, particlesSplitOptions);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}