{"ast":null,"code":"import { executeOnSingleOrMultiple, isArray, isInArray } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n  constructor(engine) {\n    this._engine = engine;\n    this.id = \"emitters\";\n  }\n  getPlugin(container) {\n    return new Emitters(this._engine, container);\n  }\n  loadOptions(options, source) {\n    var _source$interactivity, _source$interactivity2;\n    if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n      return;\n    }\n    if (source !== null && source !== void 0 && source.emitters) {\n      options.emitters = executeOnSingleOrMultiple(source.emitters, emitter => {\n        const tmp = new Emitter();\n        tmp.load(emitter);\n        return tmp;\n      });\n    }\n    const interactivityEmitters = source === null || source === void 0 ? void 0 : (_source$interactivity = source.interactivity) === null || _source$interactivity === void 0 ? void 0 : (_source$interactivity2 = _source$interactivity.modes) === null || _source$interactivity2 === void 0 ? void 0 : _source$interactivity2.emitters;\n    if (interactivityEmitters) {\n      if (isArray(interactivityEmitters)) {\n        options.interactivity.modes.emitters = {\n          random: {\n            count: 1,\n            enable: true\n          },\n          value: interactivityEmitters.map(s => {\n            const tmp = new Emitter();\n            tmp.load(s);\n            return tmp;\n          })\n        };\n      } else {\n        const emitterMode = interactivityEmitters;\n        if (emitterMode.value !== undefined) {\n          if (isArray(emitterMode.value)) {\n            var _emitterMode$random$c, _emitterMode$random$e;\n            options.interactivity.modes.emitters = {\n              random: {\n                count: (_emitterMode$random$c = emitterMode.random.count) !== null && _emitterMode$random$c !== void 0 ? _emitterMode$random$c : 1,\n                enable: (_emitterMode$random$e = emitterMode.random.enable) !== null && _emitterMode$random$e !== void 0 ? _emitterMode$random$e : false\n              },\n              value: emitterMode.value.map(s => {\n                const tmp = new Emitter();\n                tmp.load(s);\n                return tmp;\n              })\n            };\n          } else {\n            var _emitterMode$random$c2, _emitterMode$random$e2;\n            const tmp = new Emitter();\n            tmp.load(emitterMode.value);\n            options.interactivity.modes.emitters = {\n              random: {\n                count: (_emitterMode$random$c2 = emitterMode.random.count) !== null && _emitterMode$random$c2 !== void 0 ? _emitterMode$random$c2 : 1,\n                enable: (_emitterMode$random$e2 = emitterMode.random.enable) !== null && _emitterMode$random$e2 !== void 0 ? _emitterMode$random$e2 : false\n              },\n              value: tmp\n            };\n          }\n        } else {\n          const emitterOptions = options.interactivity.modes.emitters = {\n            random: {\n              count: 1,\n              enable: false\n            },\n            value: new Emitter()\n          };\n          emitterOptions.value.load(interactivityEmitters);\n        }\n      }\n    }\n  }\n  needsPlugin(options) {\n    var _options$interactivit, _options$interactivit2, _options$interactivit3;\n    if (!options) {\n      return false;\n    }\n    const emitters = options.emitters;\n    return isArray(emitters) && !!emitters.length || emitters !== undefined || !!((_options$interactivit = options.interactivity) !== null && _options$interactivit !== void 0 && (_options$interactivit2 = _options$interactivit.events) !== null && _options$interactivit2 !== void 0 && (_options$interactivit3 = _options$interactivit2.onClick) !== null && _options$interactivit3 !== void 0 && _options$interactivit3.mode) && isInArray(\"emitter\", options.interactivity.events.onClick.mode);\n  }\n}\nexport async function loadEmittersPlugin(engine) {\n  let refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  if (!engine.emitterShapeManager) {\n    engine.emitterShapeManager = new ShapeManager(engine);\n  }\n  if (!engine.addEmitterShape) {\n    engine.addEmitterShape = (name, shape) => {\n      var _engine$emitterShapeM;\n      (_engine$emitterShapeM = engine.emitterShapeManager) === null || _engine$emitterShapeM === void 0 ? void 0 : _engine$emitterShapeM.addShape(name, shape);\n    };\n  }\n  const plugin = new EmittersPlugin(engine);\n  await engine.addPlugin(plugin, refresh);\n  engine.addEmitterShape(\"circle\", new CircleShape());\n  engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";","map":{"version":3,"names":["executeOnSingleOrMultiple","isArray","isInArray","CircleShape","Emitter","Emitters","ShapeManager","SquareShape","EmittersPlugin","constructor","engine","_engine","id","getPlugin","container","loadOptions","options","source","_source$interactivity","_source$interactivity2","needsPlugin","emitters","emitter","tmp","load","interactivityEmitters","interactivity","modes","random","count","enable","value","map","s","emitterMode","undefined","_emitterMode$random$c","_emitterMode$random$e","_emitterMode$random$c2","_emitterMode$random$e2","emitterOptions","_options$interactivit","_options$interactivit2","_options$interactivit3","length","events","onClick","mode","loadEmittersPlugin","refresh","arguments","emitterShapeManager","addEmitterShape","name","shape","_engine$emitterShapeM","addShape","plugin","addPlugin"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-plugin-emitters/esm/index.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isArray, isInArray, } from \"tsparticles-engine\";\nimport { CircleShape } from \"./Shapes/Circle/CircleShape\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { Emitters } from \"./Emitters\";\nimport { ShapeManager } from \"./ShapeManager\";\nimport { SquareShape } from \"./Shapes/Square/SquareShape\";\nclass EmittersPlugin {\n    constructor(engine) {\n        this._engine = engine;\n        this.id = \"emitters\";\n    }\n    getPlugin(container) {\n        return new Emitters(this._engine, container);\n    }\n    loadOptions(options, source) {\n        if (!this.needsPlugin(options) && !this.needsPlugin(source)) {\n            return;\n        }\n        if (source?.emitters) {\n            options.emitters = executeOnSingleOrMultiple(source.emitters, (emitter) => {\n                const tmp = new Emitter();\n                tmp.load(emitter);\n                return tmp;\n            });\n        }\n        const interactivityEmitters = source?.interactivity?.modes?.emitters;\n        if (interactivityEmitters) {\n            if (isArray(interactivityEmitters)) {\n                options.interactivity.modes.emitters = {\n                    random: {\n                        count: 1,\n                        enable: true,\n                    },\n                    value: interactivityEmitters.map((s) => {\n                        const tmp = new Emitter();\n                        tmp.load(s);\n                        return tmp;\n                    }),\n                };\n            }\n            else {\n                const emitterMode = interactivityEmitters;\n                if (emitterMode.value !== undefined) {\n                    if (isArray(emitterMode.value)) {\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: emitterMode.value.map((s) => {\n                                const tmp = new Emitter();\n                                tmp.load(s);\n                                return tmp;\n                            }),\n                        };\n                    }\n                    else {\n                        const tmp = new Emitter();\n                        tmp.load(emitterMode.value);\n                        options.interactivity.modes.emitters = {\n                            random: {\n                                count: emitterMode.random.count ?? 1,\n                                enable: emitterMode.random.enable ?? false,\n                            },\n                            value: tmp,\n                        };\n                    }\n                }\n                else {\n                    const emitterOptions = (options.interactivity.modes.emitters = {\n                        random: {\n                            count: 1,\n                            enable: false,\n                        },\n                        value: new Emitter(),\n                    });\n                    emitterOptions.value.load(interactivityEmitters);\n                }\n            }\n        }\n    }\n    needsPlugin(options) {\n        if (!options) {\n            return false;\n        }\n        const emitters = options.emitters;\n        return ((isArray(emitters) && !!emitters.length) ||\n            emitters !== undefined ||\n            (!!options.interactivity?.events?.onClick?.mode &&\n                isInArray(\"emitter\", options.interactivity.events.onClick.mode)));\n    }\n}\nexport async function loadEmittersPlugin(engine, refresh = true) {\n    if (!engine.emitterShapeManager) {\n        engine.emitterShapeManager = new ShapeManager(engine);\n    }\n    if (!engine.addEmitterShape) {\n        engine.addEmitterShape = (name, shape) => {\n            engine.emitterShapeManager?.addShape(name, shape);\n        };\n    }\n    const plugin = new EmittersPlugin(engine);\n    await engine.addPlugin(plugin, refresh);\n    engine.addEmitterShape(\"circle\", new CircleShape());\n    engine.addEmitterShape(\"square\", new SquareShape());\n}\nexport * from \"./EmitterContainer\";\nexport * from \"./EmittersEngine\";\nexport * from \"./Enums/EmitterClickMode\";\nexport * from \"./Enums/EmitterShapeType\";\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}