{"ast":null,"code":"import { getRandom, getRangeValue } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nimport { updateWobble } from \"./Utils\";\nexport class WobbleUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    var _wobbleOpt$distance;\n    const wobbleOpt = particle.options.wobble;\n    if (wobbleOpt !== null && wobbleOpt !== void 0 && wobbleOpt.enable) {\n      particle.wobble = {\n        angle: getRandom() * Math.PI * 2,\n        angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n        moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10\n      };\n    } else {\n      particle.wobble = {\n        angle: 0,\n        angleSpeed: 0,\n        moveSpeed: 0\n      };\n    }\n    particle.retina.wobbleDistance = getRangeValue((_wobbleOpt$distance = wobbleOpt === null || wobbleOpt === void 0 ? void 0 : wobbleOpt.distance) !== null && _wobbleOpt$distance !== void 0 ? _wobbleOpt$distance : 0) * this.container.retina.pixelRatio;\n  }\n  isEnabled(particle) {\n    var _particle$options$wob;\n    return !particle.destroyed && !particle.spawning && !!((_particle$options$wob = particle.options.wobble) !== null && _particle$options$wob !== void 0 && _particle$options$wob.enable);\n  }\n  loadOptions(options) {\n    if (!options.wobble) {\n      options.wobble = new Wobble();\n    }\n    for (var _len = arguments.length, sources = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      sources[_key - 1] = arguments[_key];\n    }\n    for (const source of sources) {\n      options.wobble.load(source === null || source === void 0 ? void 0 : source.wobble);\n    }\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateWobble(particle, delta);\n  }\n}","map":{"version":3,"names":["getRandom","getRangeValue","Wobble","updateWobble","WobbleUpdater","constructor","container","init","particle","_wobbleOpt$distance","wobbleOpt","options","wobble","enable","angle","Math","PI","angleSpeed","speed","moveSpeed","move","retina","wobbleDistance","distance","pixelRatio","isEnabled","_particle$options$wob","destroyed","spawning","loadOptions","_len","arguments","length","sources","Array","_key","source","load","update","delta"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-updater-wobble/esm/WobbleUpdater.js"],"sourcesContent":["import { getRandom, getRangeValue, } from \"tsparticles-engine\";\nimport { Wobble } from \"./Options/Classes/Wobble\";\nimport { updateWobble } from \"./Utils\";\nexport class WobbleUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const wobbleOpt = particle.options.wobble;\n        if (wobbleOpt?.enable) {\n            particle.wobble = {\n                angle: getRandom() * Math.PI * 2,\n                angleSpeed: getRangeValue(wobbleOpt.speed.angle) / 360,\n                moveSpeed: getRangeValue(wobbleOpt.speed.move) / 10,\n            };\n        }\n        else {\n            particle.wobble = {\n                angle: 0,\n                angleSpeed: 0,\n                moveSpeed: 0,\n            };\n        }\n        particle.retina.wobbleDistance = getRangeValue(wobbleOpt?.distance ?? 0) * this.container.retina.pixelRatio;\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && !particle.spawning && !!particle.options.wobble?.enable;\n    }\n    loadOptions(options, ...sources) {\n        if (!options.wobble) {\n            options.wobble = new Wobble();\n        }\n        for (const source of sources) {\n            options.wobble.load(source?.wobble);\n        }\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateWobble(particle, delta);\n    }\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,aAAa,QAAS,oBAAoB;AAC9D,SAASC,MAAM,QAAQ,0BAA0B;AACjD,SAASC,YAAY,QAAQ,SAAS;AACtC,OAAO,MAAMC,aAAa,CAAC;EACvBC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACAC,IAAIA,CAACC,QAAQ,EAAE;IAAA,IAAAC,mBAAA;IACX,MAAMC,SAAS,GAAGF,QAAQ,CAACG,OAAO,CAACC,MAAM;IACzC,IAAIF,SAAS,aAATA,SAAS,eAATA,SAAS,CAAEG,MAAM,EAAE;MACnBL,QAAQ,CAACI,MAAM,GAAG;QACdE,KAAK,EAAEd,SAAS,CAAC,CAAC,GAAGe,IAAI,CAACC,EAAE,GAAG,CAAC;QAChCC,UAAU,EAAEhB,aAAa,CAACS,SAAS,CAACQ,KAAK,CAACJ,KAAK,CAAC,GAAG,GAAG;QACtDK,SAAS,EAAElB,aAAa,CAACS,SAAS,CAACQ,KAAK,CAACE,IAAI,CAAC,GAAG;MACrD,CAAC;IACL,CAAC,MACI;MACDZ,QAAQ,CAACI,MAAM,GAAG;QACdE,KAAK,EAAE,CAAC;QACRG,UAAU,EAAE,CAAC;QACbE,SAAS,EAAE;MACf,CAAC;IACL;IACAX,QAAQ,CAACa,MAAM,CAACC,cAAc,GAAGrB,aAAa,EAAAQ,mBAAA,GAACC,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEa,QAAQ,cAAAd,mBAAA,cAAAA,mBAAA,GAAI,CAAC,CAAC,GAAG,IAAI,CAACH,SAAS,CAACe,MAAM,CAACG,UAAU;EAC/G;EACAC,SAASA,CAACjB,QAAQ,EAAE;IAAA,IAAAkB,qBAAA;IAChB,OAAO,CAAClB,QAAQ,CAACmB,SAAS,IAAI,CAACnB,QAAQ,CAACoB,QAAQ,IAAI,CAAC,GAAAF,qBAAA,GAAClB,QAAQ,CAACG,OAAO,CAACC,MAAM,cAAAc,qBAAA,eAAvBA,qBAAA,CAAyBb,MAAM;EACzF;EACAgB,WAAWA,CAAClB,OAAO,EAAc;IAC7B,IAAI,CAACA,OAAO,CAACC,MAAM,EAAE;MACjBD,OAAO,CAACC,MAAM,GAAG,IAAIV,MAAM,CAAC,CAAC;IACjC;IAAC,SAAA4B,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAHmBC,OAAO,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAPF,OAAO,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAI3B,KAAK,MAAMC,MAAM,IAAIH,OAAO,EAAE;MAC1BtB,OAAO,CAACC,MAAM,CAACyB,IAAI,CAACD,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAExB,MAAM,CAAC;IACvC;EACJ;EACA0B,MAAMA,CAAC9B,QAAQ,EAAE+B,KAAK,EAAE;IACpB,IAAI,CAAC,IAAI,CAACd,SAAS,CAACjB,QAAQ,CAAC,EAAE;MAC3B;IACJ;IACAL,YAAY,CAACK,QAAQ,EAAE+B,KAAK,CAAC;EACjC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}