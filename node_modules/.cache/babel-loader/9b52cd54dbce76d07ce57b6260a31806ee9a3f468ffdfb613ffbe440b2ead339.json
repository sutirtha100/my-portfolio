{"ast":null,"code":"import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n  draw(context, particle, radius, opacity) {\n    var _character$style, _character$weight, _character$font;\n    const character = particle.shapeData;\n    if (character === undefined) {\n      return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n      return;\n    }\n    if (particle.text === undefined) {\n      particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n    const text = particle.text,\n      style = (_character$style = character.style) !== null && _character$style !== void 0 ? _character$style : \"\",\n      weight = (_character$weight = character.weight) !== null && _character$weight !== void 0 ? _character$weight : \"400\",\n      size = Math.round(radius) * 2,\n      font = (_character$font = character.font) !== null && _character$font !== void 0 ? _character$font : \"Verdana\",\n      fill = particle.fill,\n      offsetX = text.length * radius / 2;\n    context.font = \"\".concat(style, \" \").concat(weight, \" \").concat(size, \"px \\\"\").concat(font, \"\\\"\");\n    const pos = {\n      x: -offsetX,\n      y: radius / 2\n    };\n    context.globalAlpha = opacity;\n    if (fill) {\n      context.fillText(text, pos.x, pos.y);\n    } else {\n      context.strokeText(text, pos.x, pos.y);\n    }\n    context.globalAlpha = 1;\n  }\n  getSidesCount() {\n    return 12;\n  }\n  async init(container) {\n    const options = container.actualOptions;\n    if (validTypes.find(t => isInArray(t, options.particles.shape.type))) {\n      const shapeOptions = validTypes.map(t => options.particles.shape.options[t]).find(t => !!t),\n        promises = [];\n      executeOnSingleOrMultiple(shapeOptions, shape => {\n        promises.push(loadFont(shape.font, shape.weight));\n      });\n      await Promise.all(promises);\n    }\n  }\n  particleInit(container, particle) {\n    if (!particle.shape || !validTypes.includes(particle.shape)) {\n      return;\n    }\n    const character = particle.shapeData;\n    if (character === undefined) {\n      return;\n    }\n    const textData = character.value;\n    if (textData === undefined) {\n      return;\n    }\n    particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n  }\n}","map":{"version":3,"names":["executeOnSingleOrMultiple","isInArray","itemFromSingleOrMultiple","loadFont","validTypes","TextDrawer","draw","context","particle","radius","opacity","_character$style","_character$weight","_character$font","character","shapeData","undefined","textData","value","text","randomIndexData","style","weight","size","Math","round","font","fill","offsetX","length","concat","pos","x","y","globalAlpha","fillText","strokeText","getSidesCount","init","container","options","actualOptions","find","t","particles","shape","type","shapeOptions","map","promises","push","Promise","all","particleInit","includes"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-shape-text/esm/TextDrawer.js"],"sourcesContent":["import { executeOnSingleOrMultiple, isInArray, itemFromSingleOrMultiple, loadFont, } from \"tsparticles-engine\";\nexport const validTypes = [\"text\", \"character\", \"char\"];\nexport class TextDrawer {\n    draw(context, particle, radius, opacity) {\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        if (particle.text === undefined) {\n            particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n        }\n        const text = particle.text, style = character.style ?? \"\", weight = character.weight ?? \"400\", size = Math.round(radius) * 2, font = character.font ?? \"Verdana\", fill = particle.fill, offsetX = (text.length * radius) / 2;\n        context.font = `${style} ${weight} ${size}px \"${font}\"`;\n        const pos = {\n            x: -offsetX,\n            y: radius / 2,\n        };\n        context.globalAlpha = opacity;\n        if (fill) {\n            context.fillText(text, pos.x, pos.y);\n        }\n        else {\n            context.strokeText(text, pos.x, pos.y);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (validTypes.find((t) => isInArray(t, options.particles.shape.type))) {\n            const shapeOptions = validTypes\n                .map((t) => options.particles.shape.options[t])\n                .find((t) => !!t), promises = [];\n            executeOnSingleOrMultiple(shapeOptions, (shape) => {\n                promises.push(loadFont(shape.font, shape.weight));\n            });\n            await Promise.all(promises);\n        }\n    }\n    particleInit(container, particle) {\n        if (!particle.shape || !validTypes.includes(particle.shape)) {\n            return;\n        }\n        const character = particle.shapeData;\n        if (character === undefined) {\n            return;\n        }\n        const textData = character.value;\n        if (textData === undefined) {\n            return;\n        }\n        particle.text = itemFromSingleOrMultiple(textData, particle.randomIndexData);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}