{"ast":null,"code":"import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n  constructor(container) {\n    this.container = container;\n    this._drawLinkLine = (p1, link) => {\n      const container = this.container,\n        options = container.actualOptions,\n        p2 = link.destination,\n        pos1 = p1.getPosition(),\n        pos2 = p2.getPosition();\n      let opacity = link.opacity;\n      container.canvas.draw(ctx => {\n        if (!p1.options.links) {\n          return;\n        }\n        let colorLine;\n        const twinkle = p1.options.twinkle?.lines;\n        if (twinkle?.enable) {\n          const twinkleFreq = twinkle.frequency,\n            twinkleRgb = rangeColorToRgb(twinkle.color),\n            twinkling = getRandom() < twinkleFreq;\n          if (twinkling && twinkleRgb) {\n            colorLine = twinkleRgb;\n            opacity = getRangeValue(twinkle.opacity);\n          }\n        }\n        const p1LinksOptions = p1.options.links;\n        if (!colorLine) {\n          const linkColor = p1LinksOptions?.id !== undefined ? container.particles.linksColors.get(p1LinksOptions.id) : container.particles.linksColor;\n          colorLine = getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorLine) {\n          return;\n        }\n        const width = p1.retina.linksWidth ?? 0,\n          maxDistance = p1.retina.linksDistance ?? 0,\n          {\n            backgroundMask\n          } = options;\n        drawLinkLine({\n          context: ctx,\n          width,\n          begin: pos1,\n          end: pos2,\n          maxDistance,\n          canvasSize: container.canvas.size,\n          links: p1LinksOptions,\n          backgroundMask: backgroundMask,\n          colorLine,\n          opacity\n        });\n      });\n    };\n    this._drawLinkTriangle = (p1, link1, link2) => {\n      if (!p1.options.links) {\n        return;\n      }\n      const container = this.container,\n        options = container.actualOptions,\n        p2 = link1.destination,\n        p3 = link2.destination,\n        triangleOptions = p1.options.links.triangles,\n        opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n      if (opacityTriangle <= 0) {\n        return;\n      }\n      container.canvas.draw(ctx => {\n        const pos1 = p1.getPosition(),\n          pos2 = p2.getPosition(),\n          pos3 = p3.getPosition(),\n          linksDistance = p1.retina.linksDistance ?? 0;\n        if (getDistance(pos1, pos2) > linksDistance || getDistance(pos3, pos2) > linksDistance || getDistance(pos3, pos1) > linksDistance) {\n          return;\n        }\n        let colorTriangle = rangeColorToRgb(triangleOptions.color);\n        if (!colorTriangle) {\n          const linksOptions = p1.options.links,\n            linkColor = linksOptions?.id !== undefined ? container.particles.linksColors.get(linksOptions.id) : container.particles.linksColor;\n          colorTriangle = getLinkColor(p1, p2, linkColor);\n        }\n        if (!colorTriangle) {\n          return;\n        }\n        drawLinkTriangle({\n          context: ctx,\n          pos1,\n          pos2,\n          pos3,\n          backgroundMask: options.backgroundMask,\n          colorTriangle,\n          opacityTriangle\n        });\n      });\n    };\n    this._drawTriangles = (options, p1, link, p1Links) => {\n      const p2 = link.destination;\n      if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n        return;\n      }\n      const vertices = p2.links?.filter(t => {\n        const linkFreq = this._getLinkFrequency(p2, t.destination);\n        return p2.options.links && linkFreq <= p2.options.links.frequency && p1Links.findIndex(l => l.destination === t.destination) >= 0;\n      });\n      if (!vertices?.length) {\n        return;\n      }\n      for (const vertex of vertices) {\n        const p3 = vertex.destination,\n          triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n        if (triangleFreq > options.links.triangles.frequency) {\n          continue;\n        }\n        this._drawLinkTriangle(p1, link, vertex);\n      }\n    };\n    this._getLinkFrequency = (p1, p2) => {\n      return setLinkFrequency([p1, p2], this._freqs.links);\n    };\n    this._getTriangleFrequency = (p1, p2, p3) => {\n      return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n    };\n    this._freqs = {\n      links: new Map(),\n      triangles: new Map()\n    };\n  }\n  drawParticle(context, particle) {\n    const {\n      links,\n      options\n    } = particle;\n    if (!links || links.length <= 0) {\n      return;\n    }\n    const p1Links = links.filter(l => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n    for (const link of p1Links) {\n      this._drawTriangles(options, particle, link, p1Links);\n      if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n        this._drawLinkLine(particle, link);\n      }\n    }\n  }\n  async init() {\n    this._freqs.links = new Map();\n    this._freqs.triangles = new Map();\n  }\n  particleCreated(particle) {\n    particle.links = [];\n    if (!particle.options.links) {\n      return;\n    }\n    const ratio = this.container.retina.pixelRatio,\n      {\n        retina\n      } = particle,\n      {\n        distance,\n        width\n      } = particle.options.links;\n    retina.linksDistance = distance * ratio;\n    retina.linksWidth = width * ratio;\n  }\n  particleDestroyed(particle) {\n    particle.links = [];\n  }\n}","map":{"version":3,"names":["getDistance","getLinkColor","getRandom","getRangeValue","rangeColorToRgb","drawLinkLine","drawLinkTriangle","setLinkFrequency","LinkInstance","constructor","container","_drawLinkLine","p1","link","options","actualOptions","p2","destination","pos1","getPosition","pos2","opacity","canvas","draw","ctx","links","colorLine","twinkle","lines","enable","twinkleFreq","frequency","twinkleRgb","color","twinkling","p1LinksOptions","linkColor","id","undefined","particles","linksColors","get","linksColor","width","retina","linksWidth","maxDistance","linksDistance","backgroundMask","context","begin","end","canvasSize","size","_drawLinkTriangle","link1","link2","p3","triangleOptions","triangles","opacityTriangle","pos3","colorTriangle","linksOptions","_drawTriangles","p1Links","vertices","filter","t","linkFreq","_getLinkFrequency","findIndex","l","length","vertex","triangleFreq","_getTriangleFrequency","_freqs","Map","drawParticle","particle","init","particleCreated","ratio","pixelRatio","distance","particleDestroyed"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-interaction-particles-links/esm/LinkInstance.js"],"sourcesContent":["import { getDistance, getLinkColor, getRandom, getRangeValue, rangeColorToRgb, } from \"tsparticles-engine\";\nimport { drawLinkLine, drawLinkTriangle, setLinkFrequency } from \"./Utils\";\nexport class LinkInstance {\n    constructor(container) {\n        this.container = container;\n        this._drawLinkLine = (p1, link) => {\n            const container = this.container, options = container.actualOptions, p2 = link.destination, pos1 = p1.getPosition(), pos2 = p2.getPosition();\n            let opacity = link.opacity;\n            container.canvas.draw((ctx) => {\n                if (!p1.options.links) {\n                    return;\n                }\n                let colorLine;\n                const twinkle = p1.options.twinkle?.lines;\n                if (twinkle?.enable) {\n                    const twinkleFreq = twinkle.frequency, twinkleRgb = rangeColorToRgb(twinkle.color), twinkling = getRandom() < twinkleFreq;\n                    if (twinkling && twinkleRgb) {\n                        colorLine = twinkleRgb;\n                        opacity = getRangeValue(twinkle.opacity);\n                    }\n                }\n                const p1LinksOptions = p1.options.links;\n                if (!colorLine) {\n                    const linkColor = p1LinksOptions?.id !== undefined\n                        ? container.particles.linksColors.get(p1LinksOptions.id)\n                        : container.particles.linksColor;\n                    colorLine = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorLine) {\n                    return;\n                }\n                const width = p1.retina.linksWidth ?? 0, maxDistance = p1.retina.linksDistance ?? 0, { backgroundMask } = options;\n                drawLinkLine({\n                    context: ctx,\n                    width,\n                    begin: pos1,\n                    end: pos2,\n                    maxDistance,\n                    canvasSize: container.canvas.size,\n                    links: p1LinksOptions,\n                    backgroundMask: backgroundMask,\n                    colorLine,\n                    opacity,\n                });\n            });\n        };\n        this._drawLinkTriangle = (p1, link1, link2) => {\n            if (!p1.options.links) {\n                return;\n            }\n            const container = this.container, options = container.actualOptions, p2 = link1.destination, p3 = link2.destination, triangleOptions = p1.options.links.triangles, opacityTriangle = triangleOptions.opacity ?? (link1.opacity + link2.opacity) / 2;\n            if (opacityTriangle <= 0) {\n                return;\n            }\n            container.canvas.draw((ctx) => {\n                const pos1 = p1.getPosition(), pos2 = p2.getPosition(), pos3 = p3.getPosition(), linksDistance = p1.retina.linksDistance ?? 0;\n                if (getDistance(pos1, pos2) > linksDistance ||\n                    getDistance(pos3, pos2) > linksDistance ||\n                    getDistance(pos3, pos1) > linksDistance) {\n                    return;\n                }\n                let colorTriangle = rangeColorToRgb(triangleOptions.color);\n                if (!colorTriangle) {\n                    const linksOptions = p1.options.links, linkColor = linksOptions?.id !== undefined\n                        ? container.particles.linksColors.get(linksOptions.id)\n                        : container.particles.linksColor;\n                    colorTriangle = getLinkColor(p1, p2, linkColor);\n                }\n                if (!colorTriangle) {\n                    return;\n                }\n                drawLinkTriangle({\n                    context: ctx,\n                    pos1,\n                    pos2,\n                    pos3,\n                    backgroundMask: options.backgroundMask,\n                    colorTriangle,\n                    opacityTriangle,\n                });\n            });\n        };\n        this._drawTriangles = (options, p1, link, p1Links) => {\n            const p2 = link.destination;\n            if (!(options.links?.triangles.enable && p2.options.links?.triangles.enable)) {\n                return;\n            }\n            const vertices = p2.links?.filter((t) => {\n                const linkFreq = this._getLinkFrequency(p2, t.destination);\n                return (p2.options.links &&\n                    linkFreq <= p2.options.links.frequency &&\n                    p1Links.findIndex((l) => l.destination === t.destination) >= 0);\n            });\n            if (!vertices?.length) {\n                return;\n            }\n            for (const vertex of vertices) {\n                const p3 = vertex.destination, triangleFreq = this._getTriangleFrequency(p1, p2, p3);\n                if (triangleFreq > options.links.triangles.frequency) {\n                    continue;\n                }\n                this._drawLinkTriangle(p1, link, vertex);\n            }\n        };\n        this._getLinkFrequency = (p1, p2) => {\n            return setLinkFrequency([p1, p2], this._freqs.links);\n        };\n        this._getTriangleFrequency = (p1, p2, p3) => {\n            return setLinkFrequency([p1, p2, p3], this._freqs.triangles);\n        };\n        this._freqs = {\n            links: new Map(),\n            triangles: new Map(),\n        };\n    }\n    drawParticle(context, particle) {\n        const { links, options } = particle;\n        if (!links || links.length <= 0) {\n            return;\n        }\n        const p1Links = links.filter((l) => options.links && this._getLinkFrequency(particle, l.destination) <= options.links.frequency);\n        for (const link of p1Links) {\n            this._drawTriangles(options, particle, link, p1Links);\n            if (link.opacity > 0 && (particle.retina.linksWidth ?? 0) > 0) {\n                this._drawLinkLine(particle, link);\n            }\n        }\n    }\n    async init() {\n        this._freqs.links = new Map();\n        this._freqs.triangles = new Map();\n    }\n    particleCreated(particle) {\n        particle.links = [];\n        if (!particle.options.links) {\n            return;\n        }\n        const ratio = this.container.retina.pixelRatio, { retina } = particle, { distance, width } = particle.options.links;\n        retina.linksDistance = distance * ratio;\n        retina.linksWidth = width * ratio;\n    }\n    particleDestroyed(particle) {\n        particle.links = [];\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}