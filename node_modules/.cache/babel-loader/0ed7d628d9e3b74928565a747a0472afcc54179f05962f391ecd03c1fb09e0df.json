{"ast":null,"code":"import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n  constructor(engine, emitters, container, options, position) {\n    var _this$options$life$de, _this$_initialPositio, _this$_engine$emitter, _particlesOptions, _particlesOptions2, _particlesOptions2$mo, _particlesOptions$mov, _particlesOptions$mov2, _this$options$size, _this$options$life$co;\n    this.emitters = emitters;\n    this.container = container;\n    this._calcPosition = () => {\n      return calcPositionOrRandomFromSizeRanged({\n        size: this.container.canvas.size,\n        position: this.options.position\n      });\n    };\n    this._destroy = () => {\n      this.emitters.removeEmitter(this);\n      this._engine.dispatchEvent(\"emitterDestroyed\", {\n        container: this.container,\n        data: {\n          emitter: this\n        }\n      });\n    };\n    this._emit = () => {\n      if (this._paused) {\n        return;\n      }\n      const quantity = getRangeValue(this.options.rate.quantity);\n      this._emitParticles(quantity);\n    };\n    this._emitParticles = quantity => {\n      const position = this.getPosition(),\n        size = this.getSize(),\n        singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n      for (let i = 0; i < quantity; i++) {\n        var _this$_shape$randomPo, _this$_shape;\n        const particlesOptions = deepExtend({}, singleParticlesOptions);\n        if (this.spawnColor) {\n          var _this$options$spawnCo;\n          const hslAnimation = (_this$options$spawnCo = this.options.spawnColor) === null || _this$options$spawnCo === void 0 ? void 0 : _this$options$spawnCo.animation;\n          if (hslAnimation) {\n            this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n            this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n            this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n          }\n          if (!particlesOptions.color) {\n            particlesOptions.color = {\n              value: this.spawnColor\n            };\n          } else {\n            particlesOptions.color.value = this.spawnColor;\n          }\n        }\n        if (!position) {\n          return;\n        }\n        const pPosition = (_this$_shape$randomPo = (_this$_shape = this._shape) === null || _this$_shape === void 0 ? void 0 : _this$_shape.randomPosition(position, size, this.fill)) !== null && _this$_shape$randomPo !== void 0 ? _this$_shape$randomPo : position;\n        this.container.particles.addParticle(pPosition, particlesOptions);\n      }\n    };\n    this._prepareToDie = () => {\n      var _this$options$life;\n      if (this._paused) {\n        return;\n      }\n      const duration = (_this$options$life = this.options.life) === null || _this$options$life === void 0 ? void 0 : _this$options$life.duration;\n      if (this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal) && duration !== undefined && duration > 0) {\n        this._duration = duration * 1000;\n      }\n    };\n    this._setColorAnimation = (animation, initValue, maxValue) => {\n      var _animation$speed;\n      const container = this.container;\n      if (!animation.enable) {\n        return initValue;\n      }\n      const colorOffset = randomInRange(animation.offset),\n        delay = getRangeValue(this.options.rate.delay),\n        emitFactor = 1000 * delay / container.retina.reduceFactor,\n        colorSpeed = getRangeValue((_animation$speed = animation.speed) !== null && _animation$speed !== void 0 ? _animation$speed : 0);\n      return (initValue + colorSpeed * container.fpsLimit / emitFactor + colorOffset * 3.6) % maxValue;\n    };\n    this._engine = engine;\n    this._currentDuration = 0;\n    this._currentEmitDelay = 0;\n    this._currentSpawnDelay = 0;\n    this._initialPosition = position;\n    if (options instanceof Emitter) {\n      this.options = options;\n    } else {\n      this.options = new Emitter();\n      this.options.load(options);\n    }\n    this._spawnDelay = ((_this$options$life$de = this.options.life.delay) !== null && _this$options$life$de !== void 0 ? _this$options$life$de : 0) * 1000 / this.container.retina.reduceFactor;\n    this.position = (_this$_initialPositio = this._initialPosition) !== null && _this$_initialPositio !== void 0 ? _this$_initialPositio : this._calcPosition();\n    this.name = this.options.name;\n    this._shape = (_this$_engine$emitter = this._engine.emitterShapeManager) === null || _this$_engine$emitter === void 0 ? void 0 : _this$_engine$emitter.getShape(this.options.shape);\n    this.fill = this.options.fill;\n    this._firstSpawn = !this.options.life.wait;\n    this._startParticlesAdded = false;\n    let particlesOptions = deepExtend({}, this.options.particles);\n    (_particlesOptions = particlesOptions) !== null && _particlesOptions !== void 0 ? _particlesOptions : particlesOptions = {};\n    (_particlesOptions2$mo = (_particlesOptions2 = particlesOptions).move) !== null && _particlesOptions2$mo !== void 0 ? _particlesOptions2$mo : _particlesOptions2.move = {};\n    (_particlesOptions$mov2 = (_particlesOptions$mov = particlesOptions.move).direction) !== null && _particlesOptions$mov2 !== void 0 ? _particlesOptions$mov2 : _particlesOptions$mov.direction = this.options.direction;\n    if (this.options.spawnColor) {\n      this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n    }\n    this._paused = !this.options.autoPlay;\n    this._particlesOptions = particlesOptions;\n    this.size = (_this$options$size = this.options.size) !== null && _this$options$size !== void 0 ? _this$options$size : (() => {\n      const size = new EmitterSize();\n      size.load({\n        height: 0,\n        mode: \"percent\",\n        width: 0\n      });\n      return size;\n    })();\n    this._lifeCount = (_this$options$life$co = this.options.life.count) !== null && _this$options$life$co !== void 0 ? _this$options$life$co : -1;\n    this._immortal = this._lifeCount <= 0;\n    this._engine.dispatchEvent(\"emitterCreated\", {\n      container,\n      data: {\n        emitter: this\n      }\n    });\n    this.play();\n  }\n  externalPause() {\n    this._paused = true;\n    this.pause();\n  }\n  externalPlay() {\n    this._paused = false;\n    this.play();\n  }\n  getPosition() {\n    if (this.options.domId) {\n      const container = this.container,\n        element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n          y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio\n        };\n      }\n    }\n    return this.position;\n  }\n  getSize() {\n    const container = this.container;\n    if (this.options.domId) {\n      const element = document.getElementById(this.options.domId);\n      if (element) {\n        const elRect = element.getBoundingClientRect();\n        return {\n          width: elRect.width * container.retina.pixelRatio,\n          height: elRect.height * container.retina.pixelRatio\n        };\n      }\n    }\n    return getSize(this.size, container.canvas.size);\n  }\n  pause() {\n    if (this._paused) {\n      return;\n    }\n    delete this._emitDelay;\n  }\n  play() {\n    var _this$_spawnDelay;\n    if (this._paused) {\n      return;\n    }\n    if (!(this.container.retina.reduceFactor && (this._lifeCount > 0 || this._immortal || !this.options.life.count) && (this._firstSpawn || this._currentSpawnDelay >= ((_this$_spawnDelay = this._spawnDelay) !== null && _this$_spawnDelay !== void 0 ? _this$_spawnDelay : 0)))) {\n      return;\n    }\n    if (this._emitDelay === undefined) {\n      const delay = getRangeValue(this.options.rate.delay);\n      this._emitDelay = 1000 * delay / this.container.retina.reduceFactor;\n    }\n    if (this._lifeCount > 0 || this._immortal) {\n      this._prepareToDie();\n    }\n  }\n  resize() {\n    const initialPosition = this._initialPosition;\n    this.position = initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin) ? initialPosition : this._calcPosition();\n  }\n  update(delta) {\n    if (this._paused) {\n      return;\n    }\n    if (this._firstSpawn) {\n      var _this$_spawnDelay2, _this$_emitDelay;\n      this._firstSpawn = false;\n      this._currentSpawnDelay = (_this$_spawnDelay2 = this._spawnDelay) !== null && _this$_spawnDelay2 !== void 0 ? _this$_spawnDelay2 : 0;\n      this._currentEmitDelay = (_this$_emitDelay = this._emitDelay) !== null && _this$_emitDelay !== void 0 ? _this$_emitDelay : 0;\n    }\n    if (!this._startParticlesAdded) {\n      this._startParticlesAdded = true;\n      this._emitParticles(this.options.startCount);\n    }\n    if (this._duration !== undefined) {\n      this._currentDuration += delta.value;\n      if (this._currentDuration >= this._duration) {\n        this.pause();\n        if (this._spawnDelay !== undefined) {\n          delete this._spawnDelay;\n        }\n        if (!this._immortal) {\n          this._lifeCount--;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n          var _this$options$life$de2;\n          this.position = this._calcPosition();\n          this._spawnDelay = ((_this$options$life$de2 = this.options.life.delay) !== null && _this$options$life$de2 !== void 0 ? _this$options$life$de2 : 0) * 1000 / this.container.retina.reduceFactor;\n        } else {\n          this._destroy();\n        }\n        this._currentDuration -= this._duration;\n        delete this._duration;\n      }\n    }\n    if (this._spawnDelay !== undefined) {\n      this._currentSpawnDelay += delta.value;\n      if (this._currentSpawnDelay >= this._spawnDelay) {\n        this._engine.dispatchEvent(\"emitterPlay\", {\n          container: this.container\n        });\n        this.play();\n        this._currentSpawnDelay -= this._currentSpawnDelay;\n        delete this._spawnDelay;\n      }\n    }\n    if (this._emitDelay !== undefined) {\n      this._currentEmitDelay += delta.value;\n      if (this._currentEmitDelay >= this._emitDelay) {\n        this._emit();\n        this._currentEmitDelay -= this._emitDelay;\n      }\n    }\n  }\n}","map":{"version":3,"names":["Vector","calcPositionOrRandomFromSizeRanged","deepExtend","getRangeValue","getSize","isPointInside","itemFromSingleOrMultiple","randomInRange","rangeColorToHsl","Emitter","EmitterSize","EmitterInstance","constructor","engine","emitters","container","options","position","_this$options$life$de","_this$_initialPositio","_this$_engine$emitter","_particlesOptions","_particlesOptions2","_particlesOptions2$mo","_particlesOptions$mov","_particlesOptions$mov2","_this$options$size","_this$options$life$co","_calcPosition","size","canvas","_destroy","removeEmitter","_engine","dispatchEvent","data","emitter","_emit","_paused","quantity","rate","_emitParticles","getPosition","singleParticlesOptions","i","_this$_shape$randomPo","_this$_shape","particlesOptions","spawnColor","_this$options$spawnCo","hslAnimation","animation","h","_setColorAnimation","s","l","color","value","pPosition","_shape","randomPosition","fill","particles","addParticle","_prepareToDie","_this$options$life","duration","life","retina","reduceFactor","_lifeCount","_immortal","undefined","_duration","initValue","maxValue","_animation$speed","enable","colorOffset","offset","delay","emitFactor","colorSpeed","speed","fpsLimit","_currentDuration","_currentEmitDelay","_currentSpawnDelay","_initialPosition","load","_spawnDelay","name","emitterShapeManager","getShape","shape","_firstSpawn","wait","_startParticlesAdded","move","direction","autoPlay","height","mode","width","count","play","externalPause","pause","externalPlay","domId","element","document","getElementById","elRect","getBoundingClientRect","x","pixelRatio","y","_emitDelay","_this$_spawnDelay","resize","initialPosition","origin","update","delta","_this$_spawnDelay2","_this$_emitDelay","startCount","_this$options$life$de2"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-plugin-emitters/esm/EmitterInstance.js"],"sourcesContent":["import { Vector, calcPositionOrRandomFromSizeRanged, deepExtend, getRangeValue, getSize, isPointInside, itemFromSingleOrMultiple, randomInRange, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { Emitter } from \"./Options/Classes/Emitter\";\nimport { EmitterSize } from \"./Options/Classes/EmitterSize\";\nexport class EmitterInstance {\n    constructor(engine, emitters, container, options, position) {\n        this.emitters = emitters;\n        this.container = container;\n        this._calcPosition = () => {\n            return calcPositionOrRandomFromSizeRanged({\n                size: this.container.canvas.size,\n                position: this.options.position,\n            });\n        };\n        this._destroy = () => {\n            this.emitters.removeEmitter(this);\n            this._engine.dispatchEvent(\"emitterDestroyed\", {\n                container: this.container,\n                data: {\n                    emitter: this,\n                },\n            });\n        };\n        this._emit = () => {\n            if (this._paused) {\n                return;\n            }\n            const quantity = getRangeValue(this.options.rate.quantity);\n            this._emitParticles(quantity);\n        };\n        this._emitParticles = (quantity) => {\n            const position = this.getPosition(), size = this.getSize(), singleParticlesOptions = itemFromSingleOrMultiple(this._particlesOptions);\n            for (let i = 0; i < quantity; i++) {\n                const particlesOptions = deepExtend({}, singleParticlesOptions);\n                if (this.spawnColor) {\n                    const hslAnimation = this.options.spawnColor?.animation;\n                    if (hslAnimation) {\n                        this.spawnColor.h = this._setColorAnimation(hslAnimation.h, this.spawnColor.h, 360);\n                        this.spawnColor.s = this._setColorAnimation(hslAnimation.s, this.spawnColor.s, 100);\n                        this.spawnColor.l = this._setColorAnimation(hslAnimation.l, this.spawnColor.l, 100);\n                    }\n                    if (!particlesOptions.color) {\n                        particlesOptions.color = {\n                            value: this.spawnColor,\n                        };\n                    }\n                    else {\n                        particlesOptions.color.value = this.spawnColor;\n                    }\n                }\n                if (!position) {\n                    return;\n                }\n                const pPosition = this._shape?.randomPosition(position, size, this.fill) ?? position;\n                this.container.particles.addParticle(pPosition, particlesOptions);\n            }\n        };\n        this._prepareToDie = () => {\n            if (this._paused) {\n                return;\n            }\n            const duration = this.options.life?.duration;\n            if (this.container.retina.reduceFactor &&\n                (this._lifeCount > 0 || this._immortal) &&\n                duration !== undefined &&\n                duration > 0) {\n                this._duration = duration * 1000;\n            }\n        };\n        this._setColorAnimation = (animation, initValue, maxValue) => {\n            const container = this.container;\n            if (!animation.enable) {\n                return initValue;\n            }\n            const colorOffset = randomInRange(animation.offset), delay = getRangeValue(this.options.rate.delay), emitFactor = (1000 * delay) / container.retina.reduceFactor, colorSpeed = getRangeValue(animation.speed ?? 0);\n            return (initValue + (colorSpeed * container.fpsLimit) / emitFactor + colorOffset * 3.6) % maxValue;\n        };\n        this._engine = engine;\n        this._currentDuration = 0;\n        this._currentEmitDelay = 0;\n        this._currentSpawnDelay = 0;\n        this._initialPosition = position;\n        if (options instanceof Emitter) {\n            this.options = options;\n        }\n        else {\n            this.options = new Emitter();\n            this.options.load(options);\n        }\n        this._spawnDelay = ((this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n        this.position = this._initialPosition ?? this._calcPosition();\n        this.name = this.options.name;\n        this._shape = this._engine.emitterShapeManager?.getShape(this.options.shape);\n        this.fill = this.options.fill;\n        this._firstSpawn = !this.options.life.wait;\n        this._startParticlesAdded = false;\n        let particlesOptions = deepExtend({}, this.options.particles);\n        particlesOptions ??= {};\n        particlesOptions.move ??= {};\n        particlesOptions.move.direction ??= this.options.direction;\n        if (this.options.spawnColor) {\n            this.spawnColor = rangeColorToHsl(this.options.spawnColor);\n        }\n        this._paused = !this.options.autoPlay;\n        this._particlesOptions = particlesOptions;\n        this.size =\n            this.options.size ??\n                (() => {\n                    const size = new EmitterSize();\n                    size.load({\n                        height: 0,\n                        mode: \"percent\",\n                        width: 0,\n                    });\n                    return size;\n                })();\n        this._lifeCount = this.options.life.count ?? -1;\n        this._immortal = this._lifeCount <= 0;\n        this._engine.dispatchEvent(\"emitterCreated\", {\n            container,\n            data: {\n                emitter: this,\n            },\n        });\n        this.play();\n    }\n    externalPause() {\n        this._paused = true;\n        this.pause();\n    }\n    externalPlay() {\n        this._paused = false;\n        this.play();\n    }\n    getPosition() {\n        if (this.options.domId) {\n            const container = this.container, element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    x: (elRect.x + elRect.width / 2) * container.retina.pixelRatio,\n                    y: (elRect.y + elRect.height / 2) * container.retina.pixelRatio,\n                };\n            }\n        }\n        return this.position;\n    }\n    getSize() {\n        const container = this.container;\n        if (this.options.domId) {\n            const element = document.getElementById(this.options.domId);\n            if (element) {\n                const elRect = element.getBoundingClientRect();\n                return {\n                    width: elRect.width * container.retina.pixelRatio,\n                    height: elRect.height * container.retina.pixelRatio,\n                };\n            }\n        }\n        return getSize(this.size, container.canvas.size);\n    }\n    pause() {\n        if (this._paused) {\n            return;\n        }\n        delete this._emitDelay;\n    }\n    play() {\n        if (this._paused) {\n            return;\n        }\n        if (!(this.container.retina.reduceFactor &&\n            (this._lifeCount > 0 || this._immortal || !this.options.life.count) &&\n            (this._firstSpawn || this._currentSpawnDelay >= (this._spawnDelay ?? 0)))) {\n            return;\n        }\n        if (this._emitDelay === undefined) {\n            const delay = getRangeValue(this.options.rate.delay);\n            this._emitDelay = (1000 * delay) / this.container.retina.reduceFactor;\n        }\n        if (this._lifeCount > 0 || this._immortal) {\n            this._prepareToDie();\n        }\n    }\n    resize() {\n        const initialPosition = this._initialPosition;\n        this.position =\n            initialPosition && isPointInside(initialPosition, this.container.canvas.size, Vector.origin)\n                ? initialPosition\n                : this._calcPosition();\n    }\n    update(delta) {\n        if (this._paused) {\n            return;\n        }\n        if (this._firstSpawn) {\n            this._firstSpawn = false;\n            this._currentSpawnDelay = this._spawnDelay ?? 0;\n            this._currentEmitDelay = this._emitDelay ?? 0;\n        }\n        if (!this._startParticlesAdded) {\n            this._startParticlesAdded = true;\n            this._emitParticles(this.options.startCount);\n        }\n        if (this._duration !== undefined) {\n            this._currentDuration += delta.value;\n            if (this._currentDuration >= this._duration) {\n                this.pause();\n                if (this._spawnDelay !== undefined) {\n                    delete this._spawnDelay;\n                }\n                if (!this._immortal) {\n                    this._lifeCount--;\n                }\n                if (this._lifeCount > 0 || this._immortal) {\n                    this.position = this._calcPosition();\n                    this._spawnDelay = ((this.options.life.delay ?? 0) * 1000) / this.container.retina.reduceFactor;\n                }\n                else {\n                    this._destroy();\n                }\n                this._currentDuration -= this._duration;\n                delete this._duration;\n            }\n        }\n        if (this._spawnDelay !== undefined) {\n            this._currentSpawnDelay += delta.value;\n            if (this._currentSpawnDelay >= this._spawnDelay) {\n                this._engine.dispatchEvent(\"emitterPlay\", {\n                    container: this.container,\n                });\n                this.play();\n                this._currentSpawnDelay -= this._currentSpawnDelay;\n                delete this._spawnDelay;\n            }\n        }\n        if (this._emitDelay !== undefined) {\n            this._currentEmitDelay += delta.value;\n            if (this._currentEmitDelay >= this._emitDelay) {\n                this._emit();\n                this._currentEmitDelay -= this._emitDelay;\n            }\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}