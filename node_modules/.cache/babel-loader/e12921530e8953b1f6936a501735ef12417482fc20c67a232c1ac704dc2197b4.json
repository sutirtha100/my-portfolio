{"ast":null,"code":"import { deepExtend, isArray } from \"../../../../Utils/Utils\";\nconst charKey = \"character\",\n  charAltKey = \"char\",\n  imageKey = \"image\",\n  imageAltKey = \"images\",\n  polygonKey = \"polygon\",\n  polygonAltKey = \"star\";\nexport class Shape {\n  constructor() {\n    this.loadShape = (item, mainKey, altKey, altOverride) => {\n      var _this$options$mainKey;\n      if (!item) {\n        return;\n      }\n      const itemIsArray = isArray(item),\n        emptyValue = itemIsArray ? [] : {},\n        mainDifferentValues = itemIsArray !== isArray(this.options[mainKey]),\n        altDifferentValues = itemIsArray !== isArray(this.options[altKey]);\n      if (mainDifferentValues) {\n        this.options[mainKey] = emptyValue;\n      }\n      if (altDifferentValues && altOverride) {\n        this.options[altKey] = emptyValue;\n      }\n      this.options[mainKey] = deepExtend((_this$options$mainKey = this.options[mainKey]) !== null && _this$options$mainKey !== void 0 ? _this$options$mainKey : emptyValue, item);\n      if (!this.options[altKey] || altOverride) {\n        var _this$options$altKey;\n        this.options[altKey] = deepExtend((_this$options$altKey = this.options[altKey]) !== null && _this$options$altKey !== void 0 ? _this$options$altKey : emptyValue, item);\n      }\n    };\n    this.close = true;\n    this.fill = true;\n    this.options = {};\n    this.type = \"circle\";\n  }\n  get character() {\n    var _this$options$charKey;\n    return (_this$options$charKey = this.options[charKey]) !== null && _this$options$charKey !== void 0 ? _this$options$charKey : this.options[charAltKey];\n  }\n  set character(value) {\n    this.options[charAltKey] = this.options[charKey] = value;\n  }\n  get custom() {\n    return this.options;\n  }\n  set custom(value) {\n    this.options = value;\n  }\n  get image() {\n    var _this$options$imageKe;\n    return (_this$options$imageKe = this.options[imageKey]) !== null && _this$options$imageKe !== void 0 ? _this$options$imageKe : this.options[imageAltKey];\n  }\n  set image(value) {\n    this.options[imageAltKey] = this.options[imageKey] = value;\n  }\n  get images() {\n    return this.image;\n  }\n  set images(value) {\n    this.image = value;\n  }\n  get polygon() {\n    var _this$options$polygon;\n    return (_this$options$polygon = this.options[polygonKey]) !== null && _this$options$polygon !== void 0 ? _this$options$polygon : this.options[polygonAltKey];\n  }\n  set polygon(value) {\n    this.options[polygonAltKey] = this.options[polygonKey] = value;\n  }\n  get stroke() {\n    return [];\n  }\n  set stroke(_value) {}\n  load(data) {\n    var _data$options, _data$image;\n    if (!data) {\n      return;\n    }\n    const options = (_data$options = data.options) !== null && _data$options !== void 0 ? _data$options : data.custom;\n    if (options !== undefined) {\n      for (const shape in options) {\n        const item = options[shape];\n        if (item) {\n          var _this$options$shape;\n          this.options[shape] = deepExtend((_this$options$shape = this.options[shape]) !== null && _this$options$shape !== void 0 ? _this$options$shape : {}, item);\n        }\n      }\n    }\n    this.loadShape(data.character, charKey, charAltKey, true);\n    this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n    this.loadShape((_data$image = data.image) !== null && _data$image !== void 0 ? _data$image : data.images, imageKey, imageAltKey, true);\n    if (data.close !== undefined) {\n      this.close = data.close;\n    }\n    if (data.fill !== undefined) {\n      this.fill = data.fill;\n    }\n    if (data.type !== undefined) {\n      this.type = data.type;\n    }\n  }\n}","map":{"version":3,"names":["deepExtend","isArray","charKey","charAltKey","imageKey","imageAltKey","polygonKey","polygonAltKey","Shape","constructor","loadShape","item","mainKey","altKey","altOverride","_this$options$mainKey","itemIsArray","emptyValue","mainDifferentValues","options","altDifferentValues","_this$options$altKey","close","fill","type","character","_this$options$charKey","value","custom","image","_this$options$imageKe","images","polygon","_this$options$polygon","stroke","_value","load","data","_data$options","_data$image","undefined","shape","_this$options$shape"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-engine/esm/Options/Classes/Particles/Shape/Shape.js"],"sourcesContent":["import { deepExtend, isArray } from \"../../../../Utils/Utils\";\nconst charKey = \"character\", charAltKey = \"char\", imageKey = \"image\", imageAltKey = \"images\", polygonKey = \"polygon\", polygonAltKey = \"star\";\nexport class Shape {\n    constructor() {\n        this.loadShape = (item, mainKey, altKey, altOverride) => {\n            if (!item) {\n                return;\n            }\n            const itemIsArray = isArray(item), emptyValue = itemIsArray ? [] : {}, mainDifferentValues = itemIsArray !== isArray(this.options[mainKey]), altDifferentValues = itemIsArray !== isArray(this.options[altKey]);\n            if (mainDifferentValues) {\n                this.options[mainKey] = emptyValue;\n            }\n            if (altDifferentValues && altOverride) {\n                this.options[altKey] = emptyValue;\n            }\n            this.options[mainKey] = deepExtend(this.options[mainKey] ?? emptyValue, item);\n            if (!this.options[altKey] || altOverride) {\n                this.options[altKey] = deepExtend(this.options[altKey] ?? emptyValue, item);\n            }\n        };\n        this.close = true;\n        this.fill = true;\n        this.options = {};\n        this.type = \"circle\";\n    }\n    get character() {\n        return (this.options[charKey] ?? this.options[charAltKey]);\n    }\n    set character(value) {\n        this.options[charAltKey] = this.options[charKey] = value;\n    }\n    get custom() {\n        return this.options;\n    }\n    set custom(value) {\n        this.options = value;\n    }\n    get image() {\n        return (this.options[imageKey] ?? this.options[imageAltKey]);\n    }\n    set image(value) {\n        this.options[imageAltKey] = this.options[imageKey] = value;\n    }\n    get images() {\n        return this.image;\n    }\n    set images(value) {\n        this.image = value;\n    }\n    get polygon() {\n        return (this.options[polygonKey] ?? this.options[polygonAltKey]);\n    }\n    set polygon(value) {\n        this.options[polygonAltKey] = this.options[polygonKey] = value;\n    }\n    get stroke() {\n        return [];\n    }\n    set stroke(_value) {\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        const options = data.options ?? data.custom;\n        if (options !== undefined) {\n            for (const shape in options) {\n                const item = options[shape];\n                if (item) {\n                    this.options[shape] = deepExtend(this.options[shape] ?? {}, item);\n                }\n            }\n        }\n        this.loadShape(data.character, charKey, charAltKey, true);\n        this.loadShape(data.polygon, polygonKey, polygonAltKey, false);\n        this.loadShape(data.image ?? data.images, imageKey, imageAltKey, true);\n        if (data.close !== undefined) {\n            this.close = data.close;\n        }\n        if (data.fill !== undefined) {\n            this.fill = data.fill;\n        }\n        if (data.type !== undefined) {\n            this.type = data.type;\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}