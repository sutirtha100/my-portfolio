{"ast":null,"code":"import { getDistance, getRangeMax, getRangeValue } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n  constructor() {\n    this._initSpin = particle => {\n      var _spinOptions$position;\n      const container = particle.container,\n        options = particle.options,\n        spinOptions = options.move.spin;\n      if (!spinOptions.enable) {\n        return;\n      }\n      const spinPos = (_spinOptions$position = spinOptions.position) !== null && _spinOptions$position !== void 0 ? _spinOptions$position : {\n          x: 50,\n          y: 50\n        },\n        spinCenter = {\n          x: spinPos.x / 100 * container.canvas.size.width,\n          y: spinPos.y / 100 * container.canvas.size.height\n        },\n        pos = particle.getPosition(),\n        distance = getDistance(pos, spinCenter),\n        spinAcceleration = getRangeValue(spinOptions.acceleration);\n      particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n      particle.spin = {\n        center: spinCenter,\n        direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n        angle: particle.velocity.angle,\n        radius: distance,\n        acceleration: particle.retina.spinAcceleration\n      };\n    };\n  }\n  init(particle) {\n    const options = particle.options,\n      gravityOptions = options.move.gravity;\n    particle.gravity = {\n      enable: gravityOptions.enable,\n      acceleration: getRangeValue(gravityOptions.acceleration),\n      inverse: gravityOptions.inverse\n    };\n    this._initSpin(particle);\n  }\n  isEnabled(particle) {\n    return !particle.destroyed && particle.options.move.enable;\n  }\n  move(particle, delta) {\n    var _particle$retina, _particle$retina$move, _particle$retina2, _particle$retina2$mov, _particle$retina$maxS;\n    const particleOptions = particle.options,\n      moveOptions = particleOptions.move;\n    if (!moveOptions.enable) {\n      return;\n    }\n    const container = particle.container,\n      pxRatio = container.retina.pixelRatio,\n      slowFactor = getProximitySpeedFactor(particle),\n      baseSpeed = ((_particle$retina$move = (_particle$retina = particle.retina).moveSpeed) !== null && _particle$retina$move !== void 0 ? _particle$retina$move : _particle$retina.moveSpeed = getRangeValue(moveOptions.speed) * pxRatio) * container.retina.reduceFactor,\n      moveDrift = (_particle$retina2$mov = (_particle$retina2 = particle.retina).moveDrift) !== null && _particle$retina2$mov !== void 0 ? _particle$retina2$mov : _particle$retina2.moveDrift = getRangeValue(particle.options.move.drift) * pxRatio,\n      maxSize = getRangeMax(particleOptions.size.value) * pxRatio,\n      sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1,\n      moveSpeed = baseSpeed * sizeFactor * slowFactor * (delta.factor || 1) / diffFactor,\n      maxSpeed = (_particle$retina$maxS = particle.retina.maxSpeed) !== null && _particle$retina$maxS !== void 0 ? _particle$retina$maxS : container.retina.maxSpeed;\n    if (moveOptions.spin.enable) {\n      spin(particle, moveSpeed);\n    } else {\n      move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n    }\n    applyDistance(particle);\n  }\n}","map":{"version":3,"names":["getDistance","getRangeMax","getRangeValue","applyDistance","getProximitySpeedFactor","move","spin","diffFactor","BaseMover","constructor","_initSpin","particle","_spinOptions$position","container","options","spinOptions","enable","spinPos","position","x","y","spinCenter","canvas","size","width","height","pos","getPosition","distance","spinAcceleration","acceleration","retina","pixelRatio","center","direction","velocity","angle","radius","init","gravityOptions","gravity","inverse","isEnabled","destroyed","delta","_particle$retina","_particle$retina$move","_particle$retina2","_particle$retina2$mov","_particle$retina$maxS","particleOptions","moveOptions","pxRatio","slowFactor","baseSpeed","moveSpeed","speed","reduceFactor","moveDrift","drift","maxSize","value","sizeFactor","getRadius","factor","maxSpeed"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-move-base/esm/BaseMover.js"],"sourcesContent":["import { getDistance, getRangeMax, getRangeValue, } from \"tsparticles-engine\";\nimport { applyDistance, getProximitySpeedFactor, move, spin } from \"./Utils\";\nconst diffFactor = 2;\nexport class BaseMover {\n    constructor() {\n        this._initSpin = (particle) => {\n            const container = particle.container, options = particle.options, spinOptions = options.move.spin;\n            if (!spinOptions.enable) {\n                return;\n            }\n            const spinPos = spinOptions.position ?? { x: 50, y: 50 }, spinCenter = {\n                x: (spinPos.x / 100) * container.canvas.size.width,\n                y: (spinPos.y / 100) * container.canvas.size.height,\n            }, pos = particle.getPosition(), distance = getDistance(pos, spinCenter), spinAcceleration = getRangeValue(spinOptions.acceleration);\n            particle.retina.spinAcceleration = spinAcceleration * container.retina.pixelRatio;\n            particle.spin = {\n                center: spinCenter,\n                direction: particle.velocity.x >= 0 ? \"clockwise\" : \"counter-clockwise\",\n                angle: particle.velocity.angle,\n                radius: distance,\n                acceleration: particle.retina.spinAcceleration,\n            };\n        };\n    }\n    init(particle) {\n        const options = particle.options, gravityOptions = options.move.gravity;\n        particle.gravity = {\n            enable: gravityOptions.enable,\n            acceleration: getRangeValue(gravityOptions.acceleration),\n            inverse: gravityOptions.inverse,\n        };\n        this._initSpin(particle);\n    }\n    isEnabled(particle) {\n        return !particle.destroyed && particle.options.move.enable;\n    }\n    move(particle, delta) {\n        const particleOptions = particle.options, moveOptions = particleOptions.move;\n        if (!moveOptions.enable) {\n            return;\n        }\n        const container = particle.container, pxRatio = container.retina.pixelRatio, slowFactor = getProximitySpeedFactor(particle), baseSpeed = (particle.retina.moveSpeed ??= getRangeValue(moveOptions.speed) * pxRatio) *\n            container.retina.reduceFactor, moveDrift = (particle.retina.moveDrift ??= getRangeValue(particle.options.move.drift) * pxRatio), maxSize = getRangeMax(particleOptions.size.value) * pxRatio, sizeFactor = moveOptions.size ? particle.getRadius() / maxSize : 1, moveSpeed = (baseSpeed * sizeFactor * slowFactor * (delta.factor || 1)) / diffFactor, maxSpeed = particle.retina.maxSpeed ?? container.retina.maxSpeed;\n        if (moveOptions.spin.enable) {\n            spin(particle, moveSpeed);\n        }\n        else {\n            move(particle, moveOptions, moveSpeed, maxSpeed, moveDrift, delta);\n        }\n        applyDistance(particle);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}