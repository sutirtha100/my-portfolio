{"ast":null,"code":"import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl } from \"tsparticles-engine\";\nimport { updateStrokeColor } from \"./Utils\";\nexport class StrokeColorUpdater {\n  constructor(container) {\n    this.container = container;\n  }\n  init(particle) {\n    var _stroke$opacity, _stroke$color, _rangeColorToHsl;\n    const container = this.container,\n      options = particle.options;\n    const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n    particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n    particle.strokeOpacity = getRangeValue((_stroke$opacity = stroke.opacity) !== null && _stroke$opacity !== void 0 ? _stroke$opacity : 1);\n    particle.strokeAnimation = (_stroke$color = stroke.color) === null || _stroke$color === void 0 ? void 0 : _stroke$color.animation;\n    const strokeHslColor = (_rangeColorToHsl = rangeColorToHsl(stroke.color)) !== null && _rangeColorToHsl !== void 0 ? _rangeColorToHsl : particle.getFillColor();\n    if (strokeHslColor) {\n      particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n    }\n  }\n  isEnabled(particle) {\n    const color = particle.strokeAnimation,\n      {\n        strokeColor\n      } = particle;\n    return !particle.destroyed && !particle.spawning && !!color && ((strokeColor === null || strokeColor === void 0 ? void 0 : strokeColor.h.value) !== undefined && strokeColor.h.enable || (strokeColor === null || strokeColor === void 0 ? void 0 : strokeColor.s.value) !== undefined && strokeColor.s.enable || (strokeColor === null || strokeColor === void 0 ? void 0 : strokeColor.l.value) !== undefined && strokeColor.l.enable);\n  }\n  update(particle, delta) {\n    if (!this.isEnabled(particle)) {\n      return;\n    }\n    updateStrokeColor(particle, delta);\n  }\n}","map":{"version":3,"names":["getHslAnimationFromHsl","getRangeValue","itemFromSingleOrMultiple","rangeColorToHsl","updateStrokeColor","StrokeColorUpdater","constructor","container","init","particle","_stroke$opacity","_stroke$color","_rangeColorToHsl","options","stroke","id","reduceDuplicates","strokeWidth","width","retina","pixelRatio","strokeOpacity","opacity","strokeAnimation","color","animation","strokeHslColor","getFillColor","strokeColor","reduceFactor","isEnabled","destroyed","spawning","h","value","undefined","enable","s","l","update","delta"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-updater-stroke-color/esm/StrokeColorUpdater.js"],"sourcesContent":["import { getHslAnimationFromHsl, getRangeValue, itemFromSingleOrMultiple, rangeColorToHsl, } from \"tsparticles-engine\";\nimport { updateStrokeColor } from \"./Utils\";\nexport class StrokeColorUpdater {\n    constructor(container) {\n        this.container = container;\n    }\n    init(particle) {\n        const container = this.container, options = particle.options;\n        const stroke = itemFromSingleOrMultiple(options.stroke, particle.id, options.reduceDuplicates);\n        particle.strokeWidth = getRangeValue(stroke.width) * container.retina.pixelRatio;\n        particle.strokeOpacity = getRangeValue(stroke.opacity ?? 1);\n        particle.strokeAnimation = stroke.color?.animation;\n        const strokeHslColor = rangeColorToHsl(stroke.color) ?? particle.getFillColor();\n        if (strokeHslColor) {\n            particle.strokeColor = getHslAnimationFromHsl(strokeHslColor, particle.strokeAnimation, container.retina.reduceFactor);\n        }\n    }\n    isEnabled(particle) {\n        const color = particle.strokeAnimation, { strokeColor } = particle;\n        return (!particle.destroyed &&\n            !particle.spawning &&\n            !!color &&\n            ((strokeColor?.h.value !== undefined && strokeColor.h.enable) ||\n                (strokeColor?.s.value !== undefined && strokeColor.s.enable) ||\n                (strokeColor?.l.value !== undefined && strokeColor.l.enable)));\n    }\n    update(particle, delta) {\n        if (!this.isEnabled(particle)) {\n            return;\n        }\n        updateStrokeColor(particle, delta);\n    }\n}\n"],"mappings":"AAAA,SAASA,sBAAsB,EAAEC,aAAa,EAAEC,wBAAwB,EAAEC,eAAe,QAAS,oBAAoB;AACtH,SAASC,iBAAiB,QAAQ,SAAS;AAC3C,OAAO,MAAMC,kBAAkB,CAAC;EAC5BC,WAAWA,CAACC,SAAS,EAAE;IACnB,IAAI,CAACA,SAAS,GAAGA,SAAS;EAC9B;EACAC,IAAIA,CAACC,QAAQ,EAAE;IAAA,IAAAC,eAAA,EAAAC,aAAA,EAAAC,gBAAA;IACX,MAAML,SAAS,GAAG,IAAI,CAACA,SAAS;MAAEM,OAAO,GAAGJ,QAAQ,CAACI,OAAO;IAC5D,MAAMC,MAAM,GAAGZ,wBAAwB,CAACW,OAAO,CAACC,MAAM,EAAEL,QAAQ,CAACM,EAAE,EAAEF,OAAO,CAACG,gBAAgB,CAAC;IAC9FP,QAAQ,CAACQ,WAAW,GAAGhB,aAAa,CAACa,MAAM,CAACI,KAAK,CAAC,GAAGX,SAAS,CAACY,MAAM,CAACC,UAAU;IAChFX,QAAQ,CAACY,aAAa,GAAGpB,aAAa,EAAAS,eAAA,GAACI,MAAM,CAACQ,OAAO,cAAAZ,eAAA,cAAAA,eAAA,GAAI,CAAC,CAAC;IAC3DD,QAAQ,CAACc,eAAe,IAAAZ,aAAA,GAAGG,MAAM,CAACU,KAAK,cAAAb,aAAA,uBAAZA,aAAA,CAAcc,SAAS;IAClD,MAAMC,cAAc,IAAAd,gBAAA,GAAGT,eAAe,CAACW,MAAM,CAACU,KAAK,CAAC,cAAAZ,gBAAA,cAAAA,gBAAA,GAAIH,QAAQ,CAACkB,YAAY,CAAC,CAAC;IAC/E,IAAID,cAAc,EAAE;MAChBjB,QAAQ,CAACmB,WAAW,GAAG5B,sBAAsB,CAAC0B,cAAc,EAAEjB,QAAQ,CAACc,eAAe,EAAEhB,SAAS,CAACY,MAAM,CAACU,YAAY,CAAC;IAC1H;EACJ;EACAC,SAASA,CAACrB,QAAQ,EAAE;IAChB,MAAMe,KAAK,GAAGf,QAAQ,CAACc,eAAe;MAAE;QAAEK;MAAY,CAAC,GAAGnB,QAAQ;IAClE,OAAQ,CAACA,QAAQ,CAACsB,SAAS,IACvB,CAACtB,QAAQ,CAACuB,QAAQ,IAClB,CAAC,CAACR,KAAK,KACL,CAAAI,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEK,CAAC,CAACC,KAAK,MAAKC,SAAS,IAAIP,WAAW,CAACK,CAAC,CAACG,MAAM,IACvD,CAAAR,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAES,CAAC,CAACH,KAAK,MAAKC,SAAS,IAAIP,WAAW,CAACS,CAAC,CAACD,MAAO,IAC3D,CAAAR,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAEU,CAAC,CAACJ,KAAK,MAAKC,SAAS,IAAIP,WAAW,CAACU,CAAC,CAACF,MAAO,CAAC;EACzE;EACAG,MAAMA,CAAC9B,QAAQ,EAAE+B,KAAK,EAAE;IACpB,IAAI,CAAC,IAAI,CAACV,SAAS,CAACrB,QAAQ,CAAC,EAAE;MAC3B;IACJ;IACAL,iBAAiB,CAACK,QAAQ,EAAE+B,KAAK,CAAC;EACtC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}