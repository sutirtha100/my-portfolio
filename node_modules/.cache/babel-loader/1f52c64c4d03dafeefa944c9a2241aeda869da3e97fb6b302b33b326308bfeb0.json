{"ast":null,"code":"import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n  constructor(xOrCoords, y, z) {\n    this._updateFromAngle = (angle, length) => {\n      this.x = Math.cos(angle) * length;\n      this.y = Math.sin(angle) * length;\n    };\n    if (!isNumber(xOrCoords) && xOrCoords) {\n      this.x = xOrCoords.x;\n      this.y = xOrCoords.y;\n      const coords3d = xOrCoords;\n      this.z = coords3d.z ? coords3d.z : 0;\n    } else if (xOrCoords !== undefined && y !== undefined) {\n      this.x = xOrCoords;\n      this.y = y;\n      this.z = z !== null && z !== void 0 ? z : 0;\n    } else {\n      throw new Error(\"\".concat(errorPrefix, \" Vector3d not initialized correctly\"));\n    }\n  }\n  static get origin() {\n    return Vector3d.create(0, 0, 0);\n  }\n  get angle() {\n    return Math.atan2(this.y, this.x);\n  }\n  set angle(angle) {\n    this._updateFromAngle(angle, this.length);\n  }\n  get length() {\n    return Math.sqrt(this.getLengthSq());\n  }\n  set length(length) {\n    this._updateFromAngle(this.angle, length);\n  }\n  static clone(source) {\n    return Vector3d.create(source.x, source.y, source.z);\n  }\n  static create(x, y, z) {\n    return new Vector3d(x, y, z);\n  }\n  add(v) {\n    return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n  }\n  addTo(v) {\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n  }\n  copy() {\n    return Vector3d.clone(this);\n  }\n  distanceTo(v) {\n    return this.sub(v).length;\n  }\n  distanceToSq(v) {\n    return this.sub(v).getLengthSq();\n  }\n  div(n) {\n    return Vector3d.create(this.x / n, this.y / n, this.z / n);\n  }\n  divTo(n) {\n    this.x /= n;\n    this.y /= n;\n    this.z /= n;\n  }\n  getLengthSq() {\n    return this.x ** 2 + this.y ** 2;\n  }\n  mult(n) {\n    return Vector3d.create(this.x * n, this.y * n, this.z * n);\n  }\n  multTo(n) {\n    this.x *= n;\n    this.y *= n;\n    this.z *= n;\n  }\n  normalize() {\n    const length = this.length;\n    if (length != 0) {\n      this.multTo(1.0 / length);\n    }\n  }\n  rotate(angle) {\n    return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n  }\n  setTo(c) {\n    this.x = c.x;\n    this.y = c.y;\n    const v3d = c;\n    this.z = v3d.z ? v3d.z : 0;\n  }\n  sub(v) {\n    return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n  }\n  subFrom(v) {\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n  }\n}","map":{"version":3,"names":["errorPrefix","isNumber","Vector3d","constructor","xOrCoords","y","z","_updateFromAngle","angle","length","x","Math","cos","sin","coords3d","undefined","Error","concat","origin","create","atan2","sqrt","getLengthSq","clone","source","add","v","addTo","copy","distanceTo","sub","distanceToSq","div","n","divTo","mult","multTo","normalize","rotate","setTo","c","v3d","subFrom"],"sources":["C:/Users/Sutirtha Choudhury/OneDrive/Desktop/Portfolio/my-port-folio/node_modules/tsparticles-engine/esm/Core/Utils/Vector3d.js"],"sourcesContent":["import { errorPrefix } from \"./Constants\";\nimport { isNumber } from \"../../Utils/Utils\";\nexport class Vector3d {\n    constructor(xOrCoords, y, z) {\n        this._updateFromAngle = (angle, length) => {\n            this.x = Math.cos(angle) * length;\n            this.y = Math.sin(angle) * length;\n        };\n        if (!isNumber(xOrCoords) && xOrCoords) {\n            this.x = xOrCoords.x;\n            this.y = xOrCoords.y;\n            const coords3d = xOrCoords;\n            this.z = coords3d.z ? coords3d.z : 0;\n        }\n        else if (xOrCoords !== undefined && y !== undefined) {\n            this.x = xOrCoords;\n            this.y = y;\n            this.z = z ?? 0;\n        }\n        else {\n            throw new Error(`${errorPrefix} Vector3d not initialized correctly`);\n        }\n    }\n    static get origin() {\n        return Vector3d.create(0, 0, 0);\n    }\n    get angle() {\n        return Math.atan2(this.y, this.x);\n    }\n    set angle(angle) {\n        this._updateFromAngle(angle, this.length);\n    }\n    get length() {\n        return Math.sqrt(this.getLengthSq());\n    }\n    set length(length) {\n        this._updateFromAngle(this.angle, length);\n    }\n    static clone(source) {\n        return Vector3d.create(source.x, source.y, source.z);\n    }\n    static create(x, y, z) {\n        return new Vector3d(x, y, z);\n    }\n    add(v) {\n        return Vector3d.create(this.x + v.x, this.y + v.y, this.z + v.z);\n    }\n    addTo(v) {\n        this.x += v.x;\n        this.y += v.y;\n        this.z += v.z;\n    }\n    copy() {\n        return Vector3d.clone(this);\n    }\n    distanceTo(v) {\n        return this.sub(v).length;\n    }\n    distanceToSq(v) {\n        return this.sub(v).getLengthSq();\n    }\n    div(n) {\n        return Vector3d.create(this.x / n, this.y / n, this.z / n);\n    }\n    divTo(n) {\n        this.x /= n;\n        this.y /= n;\n        this.z /= n;\n    }\n    getLengthSq() {\n        return this.x ** 2 + this.y ** 2;\n    }\n    mult(n) {\n        return Vector3d.create(this.x * n, this.y * n, this.z * n);\n    }\n    multTo(n) {\n        this.x *= n;\n        this.y *= n;\n        this.z *= n;\n    }\n    normalize() {\n        const length = this.length;\n        if (length != 0) {\n            this.multTo(1.0 / length);\n        }\n    }\n    rotate(angle) {\n        return Vector3d.create(this.x * Math.cos(angle) - this.y * Math.sin(angle), this.x * Math.sin(angle) + this.y * Math.cos(angle), 0);\n    }\n    setTo(c) {\n        this.x = c.x;\n        this.y = c.y;\n        const v3d = c;\n        this.z = v3d.z ? v3d.z : 0;\n    }\n    sub(v) {\n        return Vector3d.create(this.x - v.x, this.y - v.y, this.z - v.z);\n    }\n    subFrom(v) {\n        this.x -= v.x;\n        this.y -= v.y;\n        this.z -= v.z;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}